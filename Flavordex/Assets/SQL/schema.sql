CREATE TABLE IF NOT EXISTS cats (
  _id INTEGER PRIMARY KEY,
  uuid TEXT,
  name  TEXT COLLATE NOCASE,
  preset INTEGER DEFAULT 0,
  updated INTEGER DEFAULT 0,
  published INTEGER DEFAULT 0,
  synced INTEGER DEFAULT 0,
  UNIQUE(uuid) ON CONFLICT FAIL
);
--
CREATE TABLE IF NOT EXISTS entries (
  _id INTEGER PRIMARY KEY,
  uuid TEXT,
  cat INTEGER,
  title TEXT COLLATE NOCASE,
  maker INTEGER,
  price TEXT COLLATE NOCASE,
  location TEXT COLLATE NOCASE,
  date INTEGER,
  rating REAL,
  notes TEXT COLLATE NOCASE,
  updated INTEGER DEFAULT 0,
  published INTEGER DEFAULT 0,
  synced INTEGER DEFAULT 0,
  UNIQUE(uuid) ON CONFLICT FAIL
);
--
CREATE TABLE IF NOT EXISTS entries_extras (
  _id INTEGER PRIMARY KEY,
  entry INTEGER,
  extra INTEGER,
  value TEXT COLLATE NOCASE,
  UNIQUE(entry, extra) ON CONFLICT REPLACE
);
--
CREATE TABLE IF NOT EXISTS entries_flavors (
  _id INTEGER PRIMARY KEY,
  entry INTEGER,
  flavor TEXT COLLATE NOCASE,
  value INTEGER,
  pos INTEGER DEFAULT 0
);
--
CREATE TABLE IF NOT EXISTS extras (
  _id INTEGER PRIMARY KEY,
  uuid TEXT,
  cat INTEGER,
  name TEXT,
  pos INTEGER DEFAULT 0,
  preset INTEGER DEFAULT 0,
  deleted INTEGER DEFAULT 0,
  UNIQUE(uuid) ON CONFLICT FAIL
);
--
CREATE TABLE IF NOT EXISTS flavors (
  _id INTEGER PRIMARY KEY,
  cat INTEGER,
  name TEXT,
  pos INTEGER DEFAULT 0
);
--
CREATE TABLE IF NOT EXISTS locations (
  _id INTEGER PRIMARY KEY,
  lat REAL,
  lon REAL,
  name TEXT,
  UNIQUE(lat, lon) ON CONFLICT REPLACE
);
--
CREATE TABLE IF NOT EXISTS makers (
  _id INTEGER PRIMARY KEY,
  name TEXT COLLATE NOCASE,
  location  TEXT COLLATE NOCASE,
  UNIQUE(name, location) ON CONFLICT IGNORE
);
--
CREATE TABLE IF NOT EXISTS photos (
  _id INTEGER PRIMARY KEY,
  entry INTEGER,
  hash TEXT,
  path TEXT,
  drive_id TEXT,
  pos INTEGER DEFAULT 0,
  UNIQUE(entry, hash) ON CONFLICT REPLACE
);
--
CREATE TABLE IF NOT EXISTS deleted (
  _id INTEGER PRIMARY KEY,
  type INTEGER,
  cat INTEGER,
  uuid TEXT,
  time INTEGER DEFAULT (CAST((julianday('now') - 2440587.5)*86400000.0 AS INTEGER))
);
